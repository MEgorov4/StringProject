operator[]
operator[]
begin
begin
end
end
cstr
size
capacity
max_capacity
grow_coef
base_capacity
TEST call:[ASSERT_EQ,SCOPED_TRACE,base_capacity,capacity,cstr,size] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,size,str,strcmp,zero] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,base_capacity,bigStr,capacity,cstr,size,strcmp,strlen] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_THROW,str] noreturn:[ASSERT_THROW]
TEST call:[ASSERT_EQ,ASSERT_NE,ASSERT_TRUE,SCOPED_TRACE,capacity,copyed,cstr,original,size,strcmp] noreturn:[ASSERT_NE]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,String,base_capacity,capacity,cstr,move,moved,original,size,str,strcmp] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,base_capacity,capacity,cstr,size,strcmp] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_NE,ASSERT_TRUE,SCOPED_TRACE,base_capacity,capacity,cstr,original,size,strcmp] noreturn:[ASSERT_NE]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,base_capacity,capacity,cstr,move,original,size,strcmp] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,strcmp] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,size,strcmp] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,size,strcmp] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,size,strcmp] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_TRUE,SCOPED_TRACE,cstr,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,ASSERT_GE,ASSERT_GT,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,size,strcmp,strlen] noreturn:[ASSERT_GT]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,size,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_THROW,SCOPED_TRACE] noreturn:[ASSERT_THROW]
TEST call:[ASSERT_THROW,SCOPED_TRACE,s] noreturn:[ASSERT_THROW]
TEST call:[ASSERT_THROW,SCOPED_TRACE,max_capacity,resize] noreturn:[ASSERT_THROW]
TEST call:[ASSERT_EQ,ASSERT_NE,SCOPED_TRACE,cstr,size,strcmp,strlen] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,size,strcmp,strlen] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,size,strcmp,strlen] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,reserve,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,reserve,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_GE,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,reserve,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_NE,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,reserve,strcmp] noreturn:[ASSERT_NE]
TEST call:[ASSERT_THROW,SCOPED_TRACE,reserve] noreturn:[ASSERT_THROW]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,resize,size,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,SCOPED_TRACE,cstr,resize,size] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,memcmp,resize,size] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,SCOPED_TRACE,cstr,resize,size] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,resize,size,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,memcmp,reserve,resize,size] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,ASSERT_GE,SCOPED_TRACE,capacity,resize,size] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,SCOPED_TRACE,cstr,resize,size] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,shrink_to_fit,size,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,ASSERT_GT,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,reserve,shrink_to_fit,size,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,ASSERT_NE,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,reserve,shrink_to_fit,size,strcmp,strlen] noreturn:[ASSERT_EQ]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,capacity,cstr,reserve,shrink_to_fit,size,strcmp] noreturn:[ASSERT_TRUE]
TEST call:[ASSERT_EQ,ASSERT_TRUE,SCOPED_TRACE,cstr,shrink_to_fit,size] noreturn:[ASSERT_TRUE]
main call:[InitGoogleTest,RUN_ALL_TESTS] noreturn:[RUN_ALL_TESTS]
